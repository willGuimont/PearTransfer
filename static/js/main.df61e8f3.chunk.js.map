{"version":3,"sources":["features/transfer/Transfer.module.css","../node_modules/peerjs/dist sync","peer/peer.ts","features/transfer/transferSlice.ts","features/transfer/Transfer.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","peer","connections","Map","registerNewConnection","conn","dispatch","console","log","on","data","blob","Blob","file","type","filetype","url","URL","createObjectURL","fileName","filename","fileDescription","FileDescription","addFile","onReceiveData","set","newConnection","name","this","FileInformation","transferSlice","createSlice","initialState","files","reducers","setId","state","action","payload","push","disconnect","fileId","uuidv4","actions","newPeer","Peer","connectTo","undefined","connect","sendFile","ids","connectionIds","map","connId","get","send","selectId","transfer","selectConnections","selectFiles","Transfer","useSelector","useDispatch","useState","peerConnectionId","setPeerConnectionId","handleFiles","a","item","className","styles","peerId","onClick","placeholder","onChange","target","value","x","i","href","download","App","store","configureStore","reducer","transferReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.df61e8f3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"peerId\":\"Transfer_peerId__1kcQP\"};","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 29;","import Peer from \"peerjs\";\nimport { AnyAction } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { FileDescription, setId, newConnection, disconnect, addFile, selectConnections } from '../features/transfer/transferSlice'\n\nexport var peer: Peer | undefined;\nlet connections = new Map<string, Peer.DataConnection>();\n\nfunction onReceiveData(data: any, dispatch: ThunkDispatch<{}, {}, AnyAction>) {\n  console.log(`Received data ${data}`);\n  var blob = new Blob([data.file], { type: data.filetype });\n  var url = URL.createObjectURL(blob);\n  var fileName = data.filename;\n\n  let fileDescription = new FileDescription(fileName, url);\n  dispatch(addFile(fileDescription));\n}\n\nfunction registerNewConnection(conn: Peer.DataConnection, dispatch: ThunkDispatch<{}, {}, AnyAction>) {\n  console.log(`Registering ${conn.peer}`)\n  let id = conn.peer;\n\n  conn.on('data', data => onReceiveData(data, dispatch));\n  conn.on('open', () => {\n    console.log('New connection opened');\n  });\n\n  connections.set(id, conn);\n  dispatch(newConnection(id))\n}\n\nexport function newPeer(dispatch: ThunkDispatch<{}, {}, AnyAction>) {\n  console.log('New peer');\n  peer = new Peer(); // TODO custom id\n  peer.on(\"open\", id => {\n    dispatch(setId(id));\n  });\n  peer.on('connection', (conn) => {\n    registerNewConnection(conn, dispatch);\n  });\n  peer.on(\"close\", () => {\n    dispatch(disconnect())\n  })\n}\n\nexport function connectTo(id: string, dispatch: ThunkDispatch<{}, {}, AnyAction>) {\n  if (peer != undefined) {\n    let conn = peer.connect(id);\n    console.log(`Connecting to ${id}`)\n    registerNewConnection(conn, dispatch)\n  }\n}\n\nexport function sendFile(connectionIds: Array<string>, file: File, dispatch: ThunkDispatch<{}, {}, AnyAction>) {\n  // TODO add to self file list too\n  connectionIds.map(connId => {\n    let conn = connections.get(connId);\n    if (conn != undefined) {\n      console.log(`Sending file ${file.name} to ${connId}`);\n      conn.send({\n        file: file,\n        filename: file.name,\n        filetype: file.type\n      })\n    };\n  });\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport * as peer from '../../peer/peer'\nimport { AppThunk, RootState } from '../../app/store';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport class FileDescription {\n  name: string;\n  url: string;\n\n  constructor(name: string, url: string) {\n    this.name = name;\n    this.url = url;\n  }\n}\n\nclass FileInformation {\n  id: string;\n  name: string;\n  url: string;\n\n  constructor(id: string, name: string, url: string) {\n    this.id = id;\n    this.name = name;\n    this.url = url;\n  }\n}\n\n\ninterface TransferState {\n  id: string,\n  connections: Array<string>,\n  files: Array<FileInformation>\n}\n\nconst initialState: TransferState = {\n  id: \"\",\n  connections: [],\n  files: []\n};\n\nexport const transferSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    setId: (state, action: PayloadAction<string>) => {\n      state.id = action.payload;\n    },\n    newConnection: (state, action: PayloadAction<string>) => {\n      state.connections.push(action.payload);\n    },\n    disconnect: (state) => {\n      state.connections = [];\n      state.id = \"\";\n    },\n    addFile: (state, action: PayloadAction<FileDescription>) => {\n      let fileDescription = action.payload;\n      let fileId = uuidv4();\n      let file = new FileInformation(fileId, fileDescription.name, fileDescription.url);\n      state.files.push(file);\n    }\n  },\n});\n\nexport const { setId, newConnection, disconnect, addFile } = transferSlice.actions;\n\nexport const newPeer = (): AppThunk => dispatch => peer.newPeer(dispatch);\nexport const connectTo = (id: string): AppThunk => dispatch => peer.connectTo(id, dispatch);\nexport const sendFile = (ids: Array<string>, file: File): AppThunk => dispatch => peer.sendFile(ids, file, dispatch);\n\nexport const selectId = (state: RootState) => state.transfer.id;\nexport const selectConnections = (state: RootState) => state.transfer.connections; // TODO might want to use Peer.listAllPeers\nexport const selectFiles = (state: RootState) => state.transfer.files;\n\nexport default transferSlice.reducer;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch, connect } from 'react-redux';\nimport {\n  selectId,\n  selectConnections,\n  selectFiles,\n  newPeer,\n  connectTo,\n  sendFile,\n} from './transferSlice';\nimport styles from './Transfer.module.css';\n\nexport function Transfer() {\n  const id = useSelector(selectId);\n  const connections = useSelector(selectConnections);\n  const files = useSelector(selectFiles);\n  const dispatch = useDispatch();\n  const [peerConnectionId, setPeerConnectionId] = useState(\"\");\n  const [data, setData] = useState(\"\");\n\n  let handleFiles = async (files: FileList | null) => {\n    if (files != null) {\n      let file = files.item(0)\n      if (file != null) {\n        dispatch(sendFile(connections, file));\n      }\n    }\n  }\n\n  return (\n    <div>\n      Peer id:\n      <div className={styles.peerId}>\n        {id || \"Please click to create Peer\"}\n        <br />\n        <button onClick={() => dispatch(newPeer())}>\n          Create peer\n        </button>\n        <br />\n        <input type=\"text\" placeholder=\"Other person's id\" onChange={e => setPeerConnectionId(e.target.value)} />\n        <br />\n        <button onClick={e => dispatch(connectTo(peerConnectionId))}>\n          Connect\n        </button>\n        <br />\n        {connections.map((x, i) => <div key={i}>{x}</div>)}\n        <br />\n        <br />\n        <label>\n          File:\n            <input type=\"file\" onChange={e => handleFiles(e.target.files)} />\n        </label>\n        <br />\n        <p>Files</p>\n        <br />\n          {files.map((x, i) =>\n              <div key={x.id}>\n                <a href={x.url} download={x.name}>{x.name}</a>\n              </div>\n          )}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Transfer } from './features/transfer/Transfer'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Transfer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport transferReducer from '../features/transfer/transferSlice'\n\nexport const store = configureStore({\n  reducer: {\n    transfer: transferReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}