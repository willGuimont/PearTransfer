{"version":3,"sources":["features/transfer/Transfer.module.css","../node_modules/peerjs/dist sync","peer/peer.ts","features/transfer/transferSlice.ts","features/transfer/Transfer.tsx","theme/theme.ts","features/about/About.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","peer","connections","Map","registerNewConnection","conn","dispatch","console","log","on","data","blob","Blob","file","type","filetype","url","URL","createObjectURL","fileName","filename","fileDescription","FileDescription","addFile","onReceiveData","set","newConnection","newPeer","randomstring","generate","length","charset","capitalization","readable","generateId","Peer","secure","setId","disconnect","name","this","FileInformation","transferSlice","createSlice","initialState","files","reducers","state","action","payload","push","fileId","uuidv4","actions","connectTo","undefined","connect","sendFile","ids","connectionIds","map","connId","get","send","selectId","transfer","selectConnections","selectFiles","Transfer","useSelector","useDispatch","useState","peerConnectionId","setPeerConnectionId","search","useLocation","handleFiles","URLSearchParams","a","item","className","styles","onClick","placeholder","onChange","target","value","x","i","href","download","theme","responsiveFontSizes","createMuiTheme","palette","primary","main","green","secondary","lime","About","useStyles","makeStyles","root","flexGrow","menuButton","marginRight","spacing","title","App","classes","StrictMode","ThemeProvider","AppBar","position","Toolbar","Typography","variant","to","Button","path","children","store","configureStore","reducer","transferReducer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yGACAA,EAAOC,QAAU,CAAC,SAAW,6B,8DCD7B,SAASC,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BF,EAAOC,QAAUC,EACjBA,EAAoBO,GAAK,K,oUCFdC,E,gKACPC,EAAc,IAAIC,IAatB,SAASC,EAAsBC,EAA2BC,GACtDC,QAAQC,IAAR,sBAA2BH,EAAKJ,OAChC,IAAID,EAAKK,EAAKJ,KAEdI,EAAKI,GAAG,QAAQ,SAAAC,GAAI,OAfxB,SAAuBA,EAAWJ,GAE9BC,QAAQC,IAAR,wBAA6BE,IAC7B,IAAIC,EAAO,IAAIC,KAAK,CAACF,EAAKG,MAAO,CAACC,KAAMJ,EAAKK,WACzCC,EAAMC,IAAIC,gBAAgBP,GAC1BQ,EAAWT,EAAKU,SAEhBC,EAAkB,IAAIC,EAAgBH,EAAUH,GACpDV,EAASiB,EAAQF,IAOOG,CAAcd,EAAMJ,MAC5CD,EAAKI,GAAG,QAAQ,WACZF,QAAQC,IAAI,4BAGhBN,EAAYuB,IAAIzB,EAAIK,GACpBC,EAASoB,EAAc1B,IAGpB,SAAS2B,EAAQrB,GACpBC,QAAQC,IAAI,YACZ,IAAIR,EAeR,WACI,IAAIA,EAAK4B,IAAaC,SAAS,CAC3BC,OAAQ,EACRC,QAAS,eACTC,eAAgB,YAChBC,UAAU,IAEd,MAAM,QAAN,OAAejC,GAtBNkC,IACTjC,EAAO,IAAIkC,IAAKnC,EAAI,CAChBoC,QAAQ,KAEP3B,GAAG,QAAQ,SAAAT,GACZM,EAAS+B,EAAMrC,OAEnBC,EAAKQ,GAAG,cAAc,SAACJ,GACnBD,EAAsBC,EAAMC,MAEhCL,EAAKQ,GAAG,SAAS,WACbH,EAASgC,Q,aCzCJhB,EAIT,WAAYiB,EAAcvB,GAAc,yBAHxCuB,UAGuC,OAFvCvB,SAEuC,EACnCwB,KAAKD,KAAOA,EACZC,KAAKxB,IAAMA,GAIbyB,EAKF,WAAYzC,EAAYuC,EAAcvB,GAAc,yBAJpDhB,QAImD,OAHnDuC,UAGmD,OAFnDvB,SAEmD,EAC/CwB,KAAKxC,GAAKA,EACVwC,KAAKD,KAAOA,EACZC,KAAKxB,IAAMA,GAiBN0B,EAAgBC,YAAY,CACrCJ,KAAM,UACNK,aARgC,CAChC5C,GAAI,GACJE,YAAa,GACb2C,MAAO,IAMPC,SAAU,CACNT,MAAO,SAACU,EAAOC,GACXD,EAAM/C,GAAKgD,EAAOC,SAEtBvB,cAAe,SAACqB,EAAOC,GACnBD,EAAM7C,YAAYgD,KAAKF,EAAOC,UAElCX,WAAY,SAACS,GACTA,EAAM7C,YAAc,GACpB6C,EAAM/C,GAAK,IAEfuB,QAAS,SAACwB,EAAOC,GACb,IAAI3B,EAAkB2B,EAAOC,QACzBE,EAASC,cACTvC,EAAO,IAAI4B,EAAgBU,EAAQ9B,EAAgBkB,KAAMlB,EAAgBL,KAC7E+B,EAAMF,MAAMK,KAAKrC,OAKtB,EAAoD6B,EAAcW,QAA3DhB,EAAP,EAAOA,MAAOX,EAAd,EAAcA,cAAeY,EAA7B,EAA6BA,WAAYf,EAAzC,EAAyCA,QAGnC+B,EAAY,SAACtD,GAAD,OAA0B,SAAAM,GAAQ,ODNpD,SAAmBN,EAAYM,GAClC,QAAYiD,GAARtD,EAAmB,CACnB,IAAII,EAAOJ,EAAKuD,QAAQxD,GACxBO,QAAQC,IAAR,wBAA6BR,IAC7BI,EAAsBC,EAAMC,ICE2BL,CAAeD,EAAIM,KACrEmD,EAAW,SAACC,EAAoB7C,GAArB,OAA8C,SAAAP,GAAQ,ODCvE,SAAkBqD,EAA8B9C,EAAYP,GAE/DqD,EAAcC,KAAI,SAAAC,GACd,IAAIxD,EAAOH,EAAY4D,IAAID,QACfN,GAARlD,IACAE,QAAQC,IAAR,uBAA4BK,EAAK0B,KAAjC,eAA4CsB,IAC5CxD,EAAK0D,KAAK,CACNlD,KAAMA,EACNO,SAAUP,EAAK0B,KACfxB,SAAUF,EAAKC,WCVmDb,CAAcyD,EAAK7C,KAExFmD,EAAW,SAACjB,GAAD,OAAsBA,EAAMkB,SAASjE,IAChDkE,EAAoB,SAACnB,GAAD,OAAsBA,EAAMkB,SAAS/D,aACzDiE,EAAc,SAACpB,GAAD,OAAsBA,EAAMkB,SAASpB,OAEjDH,IAAf,Q,yBCnEO,SAAS0B,IACZ,IAAMpE,EAAKqE,YAAYL,GACjB9D,EAAcmE,YAAYH,GAC1BrB,EAAQwB,YAAYF,GACpB7D,EAAWgE,cACjB,EAAgDC,mBAAS,IAAzD,mBAAOC,EAAP,KAAyBC,EAAzB,KACA,EAAwBF,mBAAS,IAAjC,mBAEMG,GAFN,UAEeC,cAAcD,QAIzBE,GAHU,IAAIC,gBAAgBH,GAAQZ,IAAI,MAG/B,uCAAG,WAAOjB,GAAP,eAAAiC,EAAA,sDACD,MAATjC,GAEY,OADRhC,EAAOgC,EAAMkC,KAAK,KAElBzE,EAASmD,EAASvD,EAAaW,IAJzB,2CAAH,uDASf,OACI,sBAAKmE,UAAWC,IAAOhB,SAAvB,UACI,+CACA,gCACKjE,GAAM,6BACP,uBACA,wBAAQkF,QAAS,kBAAM5E,GDgCA,SAAAA,GAAQ,OAAIL,EAAaK,OChChD,yBAGA,uBACA,uBAAOQ,KAAK,OAAOqE,YAAY,oBAAoBC,SAAU,SAAAzF,GAAC,OAAI8E,EAAoB9E,EAAE0F,OAAOC,UAC/F,uBACA,wBAAQJ,QAAS,SAAAvF,GAAC,OAAIW,EAASgD,EAAUkB,KAAzC,qBAGA,uBACCtE,EAAY0D,KAAI,SAAC2B,EAAGC,GAAJ,OAAU,8BAAcD,GAAJC,MACrC,uBACA,uBACA,gDAEI,uBACA,uBAAO1E,KAAK,OAAOsE,SAAU,SAAAzF,GAAC,OAAIiF,EAAYjF,EAAE0F,OAAOxC,aAE3D,uBACA,sCACA,uBACCA,EAAMe,KAAI,SAAC2B,EAAGC,GAAJ,OACP,8BACI,mBAAGC,KAAMF,EAAEvE,IAAK0E,SAAUH,EAAEhD,KAA5B,SAAmCgD,EAAEhD,QAD/BgD,EAAEvF,a,0DCnDnB2F,EAAQC,YAAoBC,YAAe,CACpDC,QAAS,CACLC,QAAS,CACLC,KAAMC,IAAK,MAEfC,UAAW,CACPF,KAAMG,IAAI,U,SCRf,SAASC,IACZ,OACI,8BACI,yC,oDCKNC,GAAYC,aAAW,SAACX,GAAD,MAAY,CACrCY,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaf,EAAMgB,QAAQ,IAE/BC,MAAO,CACHJ,SAAU,OAuCHK,OAnCf,WACI,IAAMC,EAAUT,KAChB,OACI,8BAEI,cAAC,IAAMU,WAAP,UACI,cAACC,EAAA,EAAD,CAAerB,MAAOA,EAAtB,SACI,eAAC,IAAD,WACI,cAACsB,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAYC,QAAQ,KAAKrC,UAAW8B,EAAQF,MAA5C,2BAGA,cAAC,IAAD,CAAMU,GAAG,IAAT,SACI,cAACC,GAAA,EAAD,qBAEJ,cAAC,IAAD,CAAMD,GAAG,SAAT,SACI,cAACC,GAAA,EAAD,2BAKZ,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,SAAZ,SACI,cAACpB,EAAD,MAEJ,cAAC,IAAD,CAAOoB,KAAK,IAAIC,SAAU,cAACrD,EAAD,mBC7CzCsD,GAAQC,YAAe,CAChCC,QAAS,CACL3D,SAAU4D,KCOEC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2D,OCTRC,IAASC,OACL,cAAC,IAAMrB,WAAP,UACI,cAAC,IAAD,CAAUW,MAAOA,GAAjB,SACI,cAAC,GAAD,QAGRW,SAASC,eAAe,SDyHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHvI,QAAQuI,MAAMA,EAAMC,c","file":"static/js/main.8a140531.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"transfer\":\"Transfer_transfer__1iUHv\"};","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 169;","import Peer from \"peerjs\";\nimport {AnyAction} from \"redux\";\nimport {ThunkDispatch} from \"redux-thunk\";\nimport {addFile, disconnect, FileDescription, newConnection, setId} from '../features/transfer/transferSlice'\nimport randomstring from 'randomstring'\n\nexport var peer: Peer | undefined;\nlet connections = new Map<string, Peer.DataConnection>();\n\nfunction onReceiveData(data: any, dispatch: ThunkDispatch<{}, {}, AnyAction>) {\n    // TODO allow to receive other informations, such as other connected users\n    console.log(`Received data ${data}`);\n    var blob = new Blob([data.file], {type: data.filetype});\n    var url = URL.createObjectURL(blob);\n    var fileName = data.filename;\n\n    let fileDescription = new FileDescription(fileName, url);\n    dispatch(addFile(fileDescription));\n}\n\nfunction registerNewConnection(conn: Peer.DataConnection, dispatch: ThunkDispatch<{}, {}, AnyAction>) {\n    console.log(`Registering ${conn.peer}`)\n    let id = conn.peer;\n\n    conn.on('data', data => onReceiveData(data, dispatch));\n    conn.on('open', () => {\n        console.log('New connection opened');\n    });\n\n    connections.set(id, conn);\n    dispatch(newConnection(id))\n}\n\nexport function newPeer(dispatch: ThunkDispatch<{}, {}, AnyAction>) {\n    console.log('New peer');\n    let id = generateId();\n    peer = new Peer(id, {\n        secure: true\n    });\n    peer.on(\"open\", id => {\n        dispatch(setId(id));\n    });\n    peer.on('connection', (conn) => {\n        registerNewConnection(conn, dispatch);\n    });\n    peer.on(\"close\", () => {\n        dispatch(disconnect())\n    })\n}\n\nfunction generateId(): string {\n    let id = randomstring.generate({\n        length: 5,\n        charset: 'alphanumeric',\n        capitalization: 'uppercase',\n        readable: true,\n    });\n    return `Pear-${id}`;\n}\n\nexport function connectTo(id: string, dispatch: ThunkDispatch<{}, {}, AnyAction>) {\n    if (peer != undefined) {\n        let conn = peer.connect(id);\n        console.log(`Connecting to ${id}`)\n        registerNewConnection(conn, dispatch)\n    }\n}\n\nexport function sendFile(connectionIds: Array<string>, file: File, dispatch: ThunkDispatch<{}, {}, AnyAction>) {\n    // TODO add to self file list too\n    connectionIds.map(connId => {\n        let conn = connections.get(connId);\n        if (conn != undefined) {\n            console.log(`Sending file ${file.name} to ${connId}`);\n            conn.send({\n                file: file,\n                filename: file.name,\n                filetype: file.type\n            })\n        }\n\n    });\n}\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport * as peer from '../../peer/peer'\nimport {AppThunk, RootState} from '../../app/store';\nimport {v4 as uuidv4} from 'uuid';\n\nexport class FileDescription {\n    name: string;\n    url: string;\n\n    constructor(name: string, url: string) {\n        this.name = name;\n        this.url = url;\n    }\n}\n\nclass FileInformation {\n    id: string;\n    name: string;\n    url: string;\n\n    constructor(id: string, name: string, url: string) {\n        this.id = id;\n        this.name = name;\n        this.url = url;\n    }\n}\n\n\ninterface TransferState {\n    id: string,\n    connections: Array<string>,\n    files: Array<FileInformation>\n}\n\nconst initialState: TransferState = {\n    id: \"\",\n    connections: [],\n    files: []\n};\n\nexport const transferSlice = createSlice({\n    name: 'counter',\n    initialState,\n    reducers: {\n        setId: (state, action: PayloadAction<string>) => {\n            state.id = action.payload;\n        },\n        newConnection: (state, action: PayloadAction<string>) => {\n            state.connections.push(action.payload);\n        },\n        disconnect: (state) => {\n            state.connections = [];\n            state.id = \"\";\n        },\n        addFile: (state, action: PayloadAction<FileDescription>) => {\n            let fileDescription = action.payload;\n            let fileId = uuidv4();\n            let file = new FileInformation(fileId, fileDescription.name, fileDescription.url);\n            state.files.push(file);\n        }\n    },\n});\n\nexport const {setId, newConnection, disconnect, addFile} = transferSlice.actions;\n\nexport const newPeer = (): AppThunk => dispatch => peer.newPeer(dispatch);\nexport const connectTo = (id: string): AppThunk => dispatch => peer.connectTo(id, dispatch);\nexport const sendFile = (ids: Array<string>, file: File): AppThunk => dispatch => peer.sendFile(ids, file, dispatch);\n\nexport const selectId = (state: RootState) => state.transfer.id;\nexport const selectConnections = (state: RootState) => state.transfer.connections; // TODO might want to use Peer.listAllPeers\nexport const selectFiles = (state: RootState) => state.transfer.files;\n\nexport default transferSlice.reducer;\n","import React, {useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {connectTo, newPeer, selectConnections, selectFiles, selectId, sendFile,} from './transferSlice';\nimport styles from './Transfer.module.css';\nimport {useLocation} from 'react-router-dom';\n\nexport function Transfer() {\n    const id = useSelector(selectId);\n    const connections = useSelector(selectConnections);\n    const files = useSelector(selectFiles);\n    const dispatch = useDispatch();\n    const [peerConnectionId, setPeerConnectionId] = useState(\"\");\n    const [data, setData] = useState(\"\");\n\n    const search = useLocation().search;\n    const urlId = new URLSearchParams(search).get('id');\n    // Test url params: {urlId || \"no url id\"} <br/>\n\n    let handleFiles = async (files: FileList | null) => {\n        if (files != null) {\n            let file = files.item(0)\n            if (file != null) {\n                dispatch(sendFile(connections, file));\n            }\n        }\n    }\n\n    return (\n        <div className={styles.transfer}>\n            <h1>Peer transfer</h1>\n            <div>\n                {id || \"Please click 'Create pear'\"}\n                <br/>\n                <button onClick={() => dispatch(newPeer())}>\n                    Create pear\n                </button>\n                <br/>\n                <input type=\"text\" placeholder=\"Other person's id\" onChange={e => setPeerConnectionId(e.target.value)}/>\n                <br/>\n                <button onClick={e => dispatch(connectTo(peerConnectionId))}>\n                    Connect\n                </button>\n                <br/>\n                {connections.map((x, i) => <div key={i}>{x}</div>)}\n                <br/>\n                <br/>\n                <label>\n                    File upload\n                    <br/>\n                    <input type=\"file\" onChange={e => handleFiles(e.target.files)}/>\n                </label>\n                <br/>\n                <p>Files</p>\n                <br/>\n                {files.map((x, i) =>\n                    <div key={x.id}>\n                        <a href={x.url} download={x.name}>{x.name}</a>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n","import {createMuiTheme, responsiveFontSizes} from '@material-ui/core/styles';\nimport lime from '@material-ui/core/colors/lime';\nimport green from '@material-ui/core/colors/green';\n\nexport const theme = responsiveFontSizes(createMuiTheme({\n    palette: {\n        primary: {\n            main: green[\"A700\"],\n        },\n        secondary: {\n            main: lime[\"A700\"],\n        },\n    },\n}));\n","import React from 'react';\n\nexport function About() {\n    return (\n        <div>\n            <h1>About</h1>\n        </div>\n    );\n}\n","import React from 'react';\nimport {BrowserRouter as Router, Link, Route, Switch} from \"react-router-dom\";\nimport './App.css';\nimport {Transfer} from './features/transfer/Transfer'\nimport {theme} from './theme/theme'\nimport {ThemeProvider} from '@material-ui/styles';\nimport {About} from './features/about/About';\nimport {AppBar, Button, makeStyles, Toolbar} from \"@material-ui/core\";\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nfunction App() {\n    const classes = useStyles();\n    return (\n        <div>\n\n            <React.StrictMode>\n                <ThemeProvider theme={theme}>\n                    <Router>\n                        <AppBar position=\"static\">\n                            <Toolbar>\n                                <Typography variant=\"h6\" className={classes.title}>\n                                    Pear Transfer\n                                </Typography>\n                                <Link to=\"/\">\n                                    <Button>Home</Button>\n                                </Link>\n                                <Link to=\"/about\">\n                                    <Button>About</Button>\n                                </Link>\n                            </Toolbar>\n                        </AppBar>\n\n                        <Switch>\n                            <Route path=\"/about\">\n                                <About/>\n                            </Route>\n                            <Route path=\"/\" children={<Transfer/>}/>\n                        </Switch>\n                    </Router>\n                </ThemeProvider>\n            </React.StrictMode>\n        </div>\n    );\n}\n\nexport default App;\n","import {Action, configureStore, ThunkAction} from '@reduxjs/toolkit';\nimport transferReducer from '../features/transfer/transferSlice'\n\nexport const store = configureStore({\n    reducer: {\n        transfer: transferReducer,\n    },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\n    RootState,\n    unknown,\n    Action<string>>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {store} from './app/store';\nimport {Provider} from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport '@fontsource/roboto';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}